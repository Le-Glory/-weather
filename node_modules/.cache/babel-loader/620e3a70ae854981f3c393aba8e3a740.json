{"remainingRequest":"D:\\桌面\\项目\\weather-guide-main\\node_modules\\babel-loader\\lib\\index.js!D:\\桌面\\项目\\weather-guide-main\\src\\api\\services\\instance.js","dependencies":[{"path":"D:\\桌面\\项目\\weather-guide-main\\src\\api\\services\\instance.js","mtime":1652792544000},{"path":"D:\\桌面\\项目\\weather-guide-main\\babel.config.js","mtime":1652792544000},{"path":"D:\\桌面\\项目\\weather-guide-main\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1653630129371},{"path":"D:\\桌面\\项目\\weather-guide-main\\node_modules\\babel-loader\\lib\\index.js","mtime":1653630130486}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LnRvLXN0cmluZy5qcyI7CmltcG9ydCBheGlvcyBmcm9tICJheGlvcyI7CmltcG9ydCByb3V0ZXIgZnJvbSAiQC9yb3V0ZXIiOwppbXBvcnQgeyBNZXNzYWdlLCBMb2FkaW5nIH0gZnJvbSAiZWxlbWVudC11aSI7CnZhciBhcGlfYmFzZV91cmwgPSAiaHR0cHM6Ly9iaXJkLmlvbGl1LmNuIjsgLy8g5Yib5bu6YXhpb3Plrp7kvosKCnZhciBpbnN0YW5jZSA9IGF4aW9zLmNyZWF0ZSh7CiAgdGltZTogMTAwMCAqIDYwLAogIGJhc2VVUkw6IGFwaV9iYXNlX3VybAp9KTsKdmFyIGxvYWRpbmdJbnN0YW5jZTsgLy/liqDovb3kuK3jgILjgILjgIIKLy8g6K+35rGC5oum5oiq5ZmoCgppbnN0YW5jZS5pbnRlcmNlcHRvcnMucmVxdWVzdC51c2UoZnVuY3Rpb24gKGNvbmZpZykgewogIGxvYWRpbmdJbnN0YW5jZSA9IExvYWRpbmcuc2VydmljZSh7CiAgICB0ZXh0OiAi5ou85ZG95Yqg6L295LitfiIKICB9KTsKICByZXR1cm4gY29uZmlnOwp9LCBmdW5jdGlvbiAoZXJyb3IpIHsKICBsb2FkaW5nSW5zdGFuY2UuY2xvc2UoKTsKICBNZXNzYWdlLmVycm9yKHsKICAgIG1lc3NhZ2U6ICLor7fmsYLotoXml7YhIgogIH0pOwogIHJldHVybiBQcm9taXNlLnJlamVjdChlcnJvcik7Cn0pOyAvLyDlk43lupTmi6bmiKrlmajljbPlvILluLjlpITnkIYKCmluc3RhbmNlLmludGVyY2VwdG9ycy5yZXNwb25zZS51c2UoZnVuY3Rpb24gKHJlc3BvbnNlKSB7CiAgbG9hZGluZ0luc3RhbmNlLmNsb3NlKCk7CiAgdmFyIGRhdGEgPSByZXNwb25zZS5kYXRhOwogIHZhciBzdGF0dXMgPSByZXNwb25zZS5zdGF0dXM7CgogIGlmIChzdGF0dXMgPT09IDIwMCkgewogICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShkYXRhKTsKICB9IGVsc2UgewogICAgTWVzc2FnZS5lcnJvcih7CiAgICAgIG1lc3NhZ2U6ICLmnI3liqHlmajlpb3lg4/lh7rkuobkupvpl67poph+IgogICAgfSk7CiAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QocmVzcG9uc2UpOwogIH0KfSwgZnVuY3Rpb24gKGVycm9yKSB7fSk7CmV4cG9ydCBkZWZhdWx0IGluc3RhbmNlOw=="},{"version":3,"sources":["D:/桌面/项目/weather-guide-main/src/api/services/instance.js"],"names":["axios","router","Message","Loading","api_base_url","instance","create","time","baseURL","loadingInstance","interceptors","request","use","config","service","text","error","close","message","Promise","reject","response","data","status","resolve"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,SAASC,OAAT,EAAkBC,OAAlB,QAAiC,YAAjC;AACA,IAAMC,YAAY,GAAG,uBAArB,C,CAEA;;AACA,IAAIC,QAAQ,GAAGL,KAAK,CAACM,MAAN,CAAa;AAC1BC,EAAAA,IAAI,EAAE,OAAO,EADa;AAE1BC,EAAAA,OAAO,EAAEJ;AAFiB,CAAb,CAAf;AAIA,IAAIK,eAAJ,C,CAAqB;AACrB;;AACAJ,QAAQ,CAACK,YAAT,CAAsBC,OAAtB,CAA8BC,GAA9B,CACE,UAACC,MAAD,EAAY;AACVJ,EAAAA,eAAe,GAAGN,OAAO,CAACW,OAAR,CAAgB;AAChCC,IAAAA,IAAI,EAAE;AAD0B,GAAhB,CAAlB;AAGA,SAAOF,MAAP;AACD,CANH,EAOE,UAACG,KAAD,EAAW;AACTP,EAAAA,eAAe,CAACQ,KAAhB;AACAf,EAAAA,OAAO,CAACc,KAAR,CAAc;AAAEE,IAAAA,OAAO,EAAE;AAAX,GAAd;AACA,SAAOC,OAAO,CAACC,MAAR,CAAeJ,KAAf,CAAP;AACD,CAXH,E,CAcA;;AACAX,QAAQ,CAACK,YAAT,CAAsBW,QAAtB,CAA+BT,GAA/B,CACE,UAACS,QAAD,EAAc;AACZZ,EAAAA,eAAe,CAACQ,KAAhB;AACA,MAAIK,IAAI,GAAGD,QAAQ,CAACC,IAApB;AACA,MAAIC,MAAM,GAAGF,QAAQ,CAACE,MAAtB;;AACA,MAAIA,MAAM,KAAK,GAAf,EAAoB;AAClB,WAAOJ,OAAO,CAACK,OAAR,CAAgBF,IAAhB,CAAP;AACD,GAFD,MAEO;AACLpB,IAAAA,OAAO,CAACc,KAAR,CAAc;AAAEE,MAAAA,OAAO,EAAE;AAAX,KAAd;AACA,WAAOC,OAAO,CAACC,MAAR,CAAeC,QAAf,CAAP;AACD;AACF,CAXH,EAYE,UAACL,KAAD,EAAW,CAAE,CAZf;AAeA,eAAeX,QAAf","sourcesContent":["import axios from \"axios\";\nimport router from \"@/router\";\nimport { Message, Loading } from \"element-ui\";\nconst api_base_url = \"https://bird.ioliu.cn\";\n\n// 创建axios实例\nlet instance = axios.create({\n  time: 1000 * 60,\n  baseURL: api_base_url,\n});\nlet loadingInstance; //加载中。。。\n// 请求拦截器\ninstance.interceptors.request.use(\n  (config) => {\n    loadingInstance = Loading.service({\n      text: \"拼命加载中~\",\n    });\n    return config;\n  },\n  (error) => {\n    loadingInstance.close();\n    Message.error({ message: \"请求超时!\" });\n    return Promise.reject(error);\n  }\n);\n\n// 响应拦截器即异常处理\ninstance.interceptors.response.use(\n  (response) => {\n    loadingInstance.close();\n    let data = response.data;\n    let status = response.status;\n    if (status === 200) {\n      return Promise.resolve(data);\n    } else {\n      Message.error({ message: \"服务器好像出了些问题~\" });\n      return Promise.reject(response);\n    }\n  },\n  (error) => {}\n);\n\nexport default instance;\n"]}]}